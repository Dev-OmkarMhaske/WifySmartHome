package com.wify.smart.home.utils;import android.content.Context;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.os.Vibrator;import android.util.Base64;import androidx.annotation.NonNull;import androidx.databinding.BaseObservable;import androidx.databinding.ObservableField;import com.google.firebase.FirebaseApp;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;import com.google.gson.Gson;import com.wify.smart.home.R;import com.wify.smart.home.activities.EditMotionActivity;import com.wify.smart.home.dto.AccessoriesIconsList;import com.wify.smart.home.dto.AccessoriesObject;import com.wify.smart.home.dto.CurtainObject;import com.wify.smart.home.dto.DBObject;import com.wify.smart.home.dto.DimmerObject;import com.wify.smart.home.dto.FanObject;import com.wify.smart.home.dto.GenericObject;import com.wify.smart.home.dto.GestureObject;import com.wify.smart.home.dto.HomeObject;import com.wify.smart.home.dto.MotionObject;import com.wify.smart.home.dto.PowerObject;import com.wify.smart.home.dto.RGBObject;import com.wify.smart.home.dto.RoomIcons;import com.wify.smart.home.dto.RoomObject;import com.wify.smart.home.dto.SceneIconList;import com.wify.smart.home.dto.SceneObject;import com.wify.smart.home.dto.ScheduleObject;import com.wify.smart.home.dto.UserObject;import com.wify.smart.home.dto.VersionObject;import com.wify.smart.home.dto.WifyThemes;import com.wify.smart.home.mqtt.MqttClient;import com.wify.smart.home.mqtt.MqttOperation;import com.wify.smart.home.scene.AddSceneActivity;import com.wify.smart.home.schedule.AddScheduleActivity;import java.io.ByteArrayOutputStream;import java.text.Format;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.LinkedList;import java.util.List;import java.util.ListIterator;import java.util.Map;import java.util.TreeSet;import java.util.concurrent.ConcurrentHashMap;public class Utility extends BaseObservable {    public static final ObservableField<String> reload = new ObservableField<>();    public static final ObservableField<String> isReady = new ObservableField<>();    public static VersionObject OnlineVersions = new VersionObject();    public static String APP_VERSION = "";    public static boolean isPulsePublish = false;    public static String MINISERVER_VERSION = "";    public static boolean isHost = false;    public static boolean isHomeConnected = false;    public static boolean isMiniserverConnected = false;    public static boolean isMiniserverInstall = false;    public static boolean isMiniserverConnectionLost = false;    public static UserObject CurrentUserObj = new UserObject();    public static int COMMUNICATION_MODE = 0;    public static String COMMUNICATION_MODE_IP = null;    public static float SCREEN_WIDTH;    public static float SCREEN_HEIGHT;    public static int TILE_SIZE;    public static int TILE_SPAN;    public static String HOMEUID;    public static String HOME;    public static String MACs = "";    public static String MQTT;    public static String DATE;    public static String CLIENT_IDs;    public static String ESPNOW;    public static boolean MainActivityFlag = false;    public static ConcurrentHashMap<String, SceneObject> SCENEMap = new ConcurrentHashMap();    public static ConcurrentHashMap<String, String> RoomImages = new ConcurrentHashMap();    public static ConcurrentHashMap<String, ScheduleObject> SCHEDULEMap = new ConcurrentHashMap<>();    public static ConcurrentHashMap<String, RoomObject> ROOMMap = new ConcurrentHashMap<>();    public static HashMap<String, AccessoriesObject> AccessoriesMap = new HashMap<>();    public static HashMap<String, String> KEYMAP = new HashMap<>();    public static ConcurrentHashMap<String, UserObject> USERMap = new ConcurrentHashMap<>();    public static HashMap<String, GestureObject> GestureMap = new HashMap();    public static String GATEWAY = "";    public static String STASSID = "";    public static String STAPWD = "";    public static String IP = "";    public static List<WifyThemes> themesList = new ArrayList<WifyThemes>() {        {            add(new WifyThemes("Theme 1", R.style.AppTheme_NoActionBar, R.drawable.app_background_3));            add(new WifyThemes("Theme 2", R.style.AppTheme_NoActionBar2, R.drawable.app_background_2));            add(new WifyThemes("Theme 3", R.style.AppTheme_NoActionBar3, R.drawable.app_background_1));            add(new WifyThemes("Theme 4", R.style.AppTheme_NoActionBar4, R.drawable.app_background_4));            add(new WifyThemes("Theme 5", R.style.AppTheme_NoActionBar5, R.drawable.app_background_5));        }    };    public static ConcurrentHashMap<String, GenericObject> genericObjectHashMap = new ConcurrentHashMap<>();    public static ConcurrentHashMap<String, RGBObject> rgbObjectHashMap = new ConcurrentHashMap<>();    public static ConcurrentHashMap<String, MotionObject> motionObjectHashMap = new ConcurrentHashMap<>();    public static ConcurrentHashMap<String, CurtainObject> curtainObjectHashMap = new ConcurrentHashMap<>();    public static ConcurrentHashMap<String, PowerObject> powerObjectHashMap = new ConcurrentHashMap<>();    public static ConcurrentHashMap<String, FanObject> fanObjectHashMap = new ConcurrentHashMap<>();    public static ConcurrentHashMap<String, DimmerObject> dimmerObjectHashMap = new ConcurrentHashMap<>();    public static FirebaseDatabase firebaseDatabase;    public static Vibrator vibrator;    public static DBObject dbObject;    public static DatabaseReference myRef_db, myRef_homes;    public static FirebaseApp firebaseApp;    public static FirebaseAuth firebaseAuth;    public static HomeObject connectedHome = null;    public static ArrayList<ObservableField<String>> runtimeObservable = new ArrayList();    public static ArrayList<RoomIcons> Defined_room_List = new ArrayList<RoomIcons>() {        {            add(new RoomIcons("Basement", R.drawable.icon_basement_a, R.drawable.icon_basement_d));            add(new RoomIcons("Bedroom", R.drawable.icon_bedroom_a, R.drawable.icon_bedroom_d));            add(new RoomIcons("Kitchen", R.drawable.icon_kitchen_a, R.drawable.icon_kitchen_d));            add(new RoomIcons("Livingroom", R.drawable.icon_livingroom_a, R.drawable.icon_livingroom_d));            add(new RoomIcons("Lobby", R.drawable.icon_lobby_a, R.drawable.icon_lobby_d));            add(new RoomIcons("Outdoor", R.drawable.icon_outdoor_a, R.drawable.icon_outdoor_d));            add(new RoomIcons("Bathroom", R.drawable.icon_bathroom_a, R.drawable.icon_bathroom_d));            add(new RoomIcons("Diningroom", R.drawable.icon_diningroom_a, R.drawable.icon_diningroom_d));            add(new RoomIcons("Parking", R.drawable.icon_parking_a, R.drawable.icon_parking_d));            add(new RoomIcons("WC", R.drawable.icon_wc_a, R.drawable.icon_wc_d));        }    };    public static ArrayList<AccessoriesIconsList> accessoriesIconsLists = new ArrayList<AccessoriesIconsList>() {        {            add(new AccessoriesIconsList("Light", R.drawable.icon_light_fill_a, R.drawable.icon_light_fill_d));            add(new AccessoriesIconsList("TV", R.drawable.icon_tv_a, R.drawable.icon_tv_d));            add(new AccessoriesIconsList("DTH", R.drawable.icon_setupbox_a, R.drawable.icon_setupbox_d));            add(new AccessoriesIconsList("Home_Theater", R.drawable.icon_home_theater_a, R.drawable.icon_home_theater_d));            add(new AccessoriesIconsList("LED_Strip", R.drawable.icon_light_fill_a, R.drawable.icon_light_fill_d));            add(new AccessoriesIconsList("Microwave", R.drawable.icon_microwave_a, R.drawable.icon_microwave_d));            add(new AccessoriesIconsList("AC", R.drawable.icon_ac_a, R.drawable.icon_ac_d));            add(new AccessoriesIconsList("Washing_Machine", R.drawable.icon_washing_a, R.drawable.icon_washing_d));            add(new AccessoriesIconsList("Plug", R.drawable.icon_plug_a, R.drawable.icon_plug_d));            add(new AccessoriesIconsList("Cooler", R.drawable.icon_cooler_a, R.drawable.icon_cooler_d));            add(new AccessoriesIconsList("Chimney", R.drawable.icon_chimani_a, R.drawable.icon_chimani_d));            add(new AccessoriesIconsList("Printer", R.drawable.icon_printer_a, R.drawable.icon_printer_d));        }    };    public static ArrayList<SceneIconList> SceneIconList = new ArrayList<SceneIconList>() {        {            add(new SceneIconList("Welcome", R.drawable.icon_welcome_a, R.drawable.icon_welcome_d));            add(new SceneIconList("Away", R.drawable.icon_away_a, R.drawable.icon_away_d));            add(new SceneIconList("Party", R.drawable.icon_party_a, R.drawable.icon_party_d));            add(new SceneIconList("Dinning", R.drawable.icon_dinner_a, R.drawable.icon_dinner_d));            add(new SceneIconList("Morning", R.drawable.icon_morning_a, R.drawable.icon_morning_d));            add(new SceneIconList("Night", R.drawable.icon_night_a, R.drawable.icon_night_d));        }    };    public static List<GestureObject> GestureList = new ArrayList<GestureObject>() {        {            add(new GestureObject("Right", "", R.drawable.icon_right_gesture));            add(new GestureObject("Left", "", R.drawable.icon_left_gesture));            add(new GestureObject("Right-Left", "", R.drawable.icon_right_left_gesture));            add(new GestureObject("Left-Right", "", R.drawable.icon_left_right_gesture));            add(new GestureObject("Up", "", R.drawable.icon_up_gesture));            add(new GestureObject("Down", "", R.drawable.icon_down_gesture));            add(new GestureObject("Up-Down", "", R.drawable.icon_up_down_gesture));            add(new GestureObject("Down-Up", "", R.drawable.icon_down_up_gesture));            add(new GestureObject("Forward", "", R.drawable.icon_forward_gesture));            add(new GestureObject("Backward", "", R.drawable.icon_backward_gesture));            add(new GestureObject("Forward-Backward", "", R.drawable.icon_forward_backward_gesture));            add(new GestureObject("Backward-Forward", "", R.drawable.icon_backward_forward_gesture));            add(new GestureObject("Clockwise", "", R.drawable.icon_clockwise_gesture));            add(new GestureObject("Anti-clockwise", "", R.drawable.icon_anticlockwise_gesture));            add(new GestureObject("Wave", "", R.drawable.icon_wave_gesture));        }    };    public static void ResetAttribute() {        try {            isHost = false;            COMMUNICATION_MODE = 0;            COMMUNICATION_MODE_IP = null;            HOMEUID = "";            HOME = "";            MACs = "";            MQTT = "";            DATE = "";            ESPNOW = "";            STASSID = "";            STAPWD = "";            IP = "";            GATEWAY = "";            SCENEMap = new ConcurrentHashMap<>();            SCHEDULEMap = new ConcurrentHashMap<>();            ROOMMap = new ConcurrentHashMap<>();            USERMap = new ConcurrentHashMap<>();            genericObjectHashMap = new ConcurrentHashMap<>();            rgbObjectHashMap = new ConcurrentHashMap<>();            motionObjectHashMap = new ConcurrentHashMap<>();            curtainObjectHashMap = new ConcurrentHashMap<>();            powerObjectHashMap = new ConcurrentHashMap<>();            fanObjectHashMap = new ConcurrentHashMap<>();            dimmerObjectHashMap = new ConcurrentHashMap<>();            KEYMAP = new HashMap<>();            isMiniserverInstall = false;            isHomeConnected = false;            isMiniserverConnected = false;            isMiniserverConnectionLost = false;            connectedHome = null;            runtimeObservable = new ArrayList();            MqttClient.gotoMainActivityFlag = false;            MainActivityFlag = false;        } catch (Exception e) {            e.printStackTrace();        }    }    public static String getDate_inDDMMYY() {        Format f = new SimpleDateFormat("dd/MM/yy");        return f.format(new Date());    }    public static String getCurrentDate() {        String strDate = null;        try {            Format f = new SimpleDateFormat("YYYY#MM#dd#HH#mm#ss");            strDate = f.format(new Date());        } catch (Exception e) {            e.printStackTrace();        }        return strDate;    }    public static void saveHome(HomeObject homeObject, Context context) {        try {            if (homeObject.getHome_uid() == null) {                String home_key = myRef_homes.push().getKey();                homeObject.setHome_uid(home_key);            }            myRef_homes.child(homeObject.getHome_uid()).setValue(homeObject);            Utility.myRef_db.child(SharedPreference.getPhone_number(context)).addListenerForSingleValueEvent(new ValueEventListener() {                @Override                public void onDataChange(DataSnapshot dataSnapshot) {                    DBObject dbObject = new DBObject();                    if (dataSnapshot.exists()) {                        dbObject = dataSnapshot.getValue(DBObject.class);                    }                    if (dbObject.getHost() != null) {                        dbObject.getHost().add(homeObject.getHome_uid());                    } else {                        ArrayList<String> host_list = new ArrayList<>();                        host_list.add(homeObject.getHome_uid());                        dbObject.setHost(host_list);                    }                    myRef_db.child(SharedPreference.getPhone_number(context)).setValue(dbObject);                }                @Override                public void onCancelled(@NonNull DatabaseError error) {                }            });        } catch (Exception e) {            e.printStackTrace();        }    }    public static void vibrate() {        try {            Utility.vibrator.vibrate(50);        } catch (Exception e) {            e.printStackTrace();        }    }    public static SceneIconList getSceneIcon(String name) {        ListIterator<SceneIconList> sceneIconListIterator = Utility.SceneIconList.listIterator();        SceneIconList sceneIcon = null;        try {            while (sceneIconListIterator.hasNext()) {                sceneIcon = sceneIconListIterator.next();                if (name != null && sceneIcon != null && sceneIcon.getName() != null && (sceneIcon.getName().equalsIgnoreCase(name) || name.contains(sceneIcon.getName()))) {                    return sceneIcon;                }            }        } catch (Exception e) {            e.printStackTrace();        }        return null;    }    public static AccessoriesIconsList getAccessoryLogo(String logo) {        try {            for (AccessoriesIconsList accessoriesIcon : Utility.accessoriesIconsLists) {                if (accessoriesIcon.getName().equalsIgnoreCase(logo)) {                    return accessoriesIcon;                }            }        } catch (Exception e) {            e.printStackTrace();        }        return new AccessoriesIconsList();    }    public static RoomIcons getRoomIcon(String name) {        ListIterator<RoomIcons> roomIconsListIterator = Utility.Defined_room_List.listIterator();        RoomIcons roomIcons = null;        try {            while (roomIconsListIterator.hasNext()) {                roomIcons = roomIconsListIterator.next();                if (name != null && roomIcons != null && roomIcons.getName() != null && (roomIcons.getName().equalsIgnoreCase(name) || name.contains(roomIcons.getName()))) {                    return roomIcons;                }            }        } catch (Exception e) {            e.printStackTrace();        }        return null;    }    public static int GetGestureLogo(String name) {        try {            for (GestureObject gestureObject : GestureList) {                if (gestureObject.getName().equalsIgnoreCase(name)) {                    return gestureObject.getIcon();                }            }        } catch (Exception e) {            e.printStackTrace();        }        return 0;    }    public static void setDbData(String phone_number, String shared_id, String name) {        try {            Utility.myRef_db.child(phone_number).addListenerForSingleValueEvent(new ValueEventListener() {                @Override                public void onDataChange(DataSnapshot dataSnapshot) {                    DBObject dbObject;                    ArrayList<String> sharArrayList = new ArrayList<>();                    sharArrayList.add(shared_id);                    if (dataSnapshot.exists()) {                        dbObject = dataSnapshot.getValue(DBObject.class);                        dbObject.setName(name);                        if (dbObject.getShared() != null && !dbObject.getShared().contains(shared_id)) {                            dbObject.getShared().add(shared_id);                            System.out.println(">>>> shared_id " + shared_id);                        } else if (dbObject.getShared() == null) {                            dbObject.setShared(sharArrayList);                            System.out.println(">>>> sharArrayList " + new Gson().toJson(sharArrayList));                        }                    } else {                        dbObject = new DBObject();                        dbObject.setName(name);                        dbObject.setDate(getDate_inDDMMYY());                        dbObject.setShared(sharArrayList);                    }                    System.out.println(">>>> dbObject >>> update >>>" + new Gson().toJson(dbObject));                    Utility.myRef_db.child(phone_number).setValue(dbObject);                }                @Override                public void onCancelled(DatabaseError databaseError) {                }            });        } catch (Exception e) {            e.printStackTrace();        }    }    public static void UpdateHome(HomeObject homeObject) {        try {            if (homeObject != null && homeObject.getHome_uid() != null) {                Utility.myRef_homes.child(homeObject.getHome_uid()).setValue(homeObject);            }        } catch (Exception e) {            e.printStackTrace();        }    }    public static LinkedList<Object> getRoomViseAccessoriesInMotion(RoomObject roomObject) {        LinkedList<Object> room_accessories = new LinkedList<>();        try {            if (roomObject != null) {                for (GenericObject genericObject : Utility.genericObjectHashMap.values()) {                    if (genericObject.getUsed().equalsIgnoreCase(UtilityConstants.STATE_TRUE) && roomObject.getMac().contains(genericObject.getMac())) {                        GenericObject genericObject1 = (GenericObject) genericObject.clone();                        genericObject1.setState(UtilityConstants.STATE_TRUE);                        room_accessories.add(genericObject1);                    }                }            }        } catch (Exception e) {            e.printStackTrace();        }        return room_accessories;    }    public static LinkedList<Object> getRoomViseAccessories(RoomObject roomObject) {        LinkedList<Object> room_accessories = new LinkedList<>();        try {            if (roomObject != null && roomObject.getMac().trim().length() > 0) {                for (FanObject fanObject : Utility.fanObjectHashMap.values()) {                    if (roomObject.getMac().contains(fanObject.getMac()) || (fanObject.getType().equalsIgnoreCase(UtilityConstants.CFM) && roomObject.getMac().contains(fanObject.getMac().replace("F1", "")))) {                        FanObject fanObject1 = (FanObject) fanObject.clone();                        fanObject1.setState(UtilityConstants.STATE_FALSE);                        room_accessories.add(fanObject1);                    }                }                for (PowerObject powerObject : Utility.powerObjectHashMap.values()) {                    if (roomObject.getMac().contains(powerObject.getMac())) {                        PowerObject powerObject1 = (PowerObject) powerObject.clone();                        powerObject1.setState(UtilityConstants.STATE_FALSE);                        room_accessories.add(powerObject1);                    }                }                for (CurtainObject curtainObject : Utility.curtainObjectHashMap.values()) {                    if (roomObject.getMac().contains(curtainObject.getMac())) {                        CurtainObject curtainObject1 = (CurtainObject) curtainObject.clone();                        curtainObject1.setState(UtilityConstants.STATE_FALSE);                        room_accessories.add(curtainObject1);                    }                }                for (RGBObject rgbObject : Utility.rgbObjectHashMap.values()) {                    if (roomObject.getMac().contains(rgbObject.getMac())) {                        RGBObject rgbObject1 = (RGBObject) rgbObject.clone();                        rgbObject1.setState(UtilityConstants.STATE_FALSE);                        room_accessories.add(rgbObject1);                    }                }                for (GenericObject genericObject : Utility.genericObjectHashMap.values()) {                    if (genericObject.getUsed().equalsIgnoreCase(UtilityConstants.STATE_TRUE) && roomObject.getMac().contains(genericObject.getMac())) {                        GenericObject genericObject1 = (GenericObject) genericObject.clone();                        genericObject1.setState(UtilityConstants.STATE_FALSE);                        room_accessories.add(genericObject1);                    }                }            }        } catch (Exception e) {            e.printStackTrace();        }        return room_accessories;    }    public static List<RoomObject> getRoomList() {        List<RoomObject> roomObjectList = new ArrayList<>();        try {            for (RoomObject roomObject : ROOMMap.values()) {                if (roomObject != null) {                    roomObjectList.add(roomObject);                }            }        } catch (Exception e) {            e.printStackTrace();        }        return roomObjectList;    }    public static String PrePareGestureObject(GestureObject gestureObject) {        StringBuilder data = new StringBuilder("");        data.append(gestureObject.getName()).append("#").append(gestureObject.getScene());        return data.toString().trim();    }    public static HashMap<String, String> getDimmerDataMap(String data) {        HashMap<String, String> map = new HashMap<>();        String split[] = null;        try {            if (data.contains("$")) {                split = data.split("\\$");                for (int i = 0; i < split.length; i++) {                    map.put("" + i, split[i]);                }            }        } catch (Exception e) {            e.printStackTrace();        }        return map;    }    public static void checkForAccessoryUpdate(Context context) {        Utility.KEYMAP = SharedPreference.getKeyMap(MqttClient.globalContext);        TreeSet<String> fakeMACSet = new TreeSet<>();        TreeSet<String> HfakeMACSet = new TreeSet<>();        String ESPNOW = null;        try {            if (SharedPreference.getAccessorySyncFlag(context) && isHost) {                UserObject userObject = SharedPreference.getHostUser(context);                HashMap<String, AccessoriesObject> accessoriesObjects = SharedPreference.getAccessories(context);                for (AccessoriesObject accessoriesObject : accessoriesObjects.values()) {                    if (accessoriesObject != null) {                        if (accessoriesObject.getAccessory().equalsIgnoreCase(UtilityConstants.MINISERVER)) {                            ESPNOW = accessoriesObject.getEsp_now();                        }                        if (accessoriesObject.getAccessory().equalsIgnoreCase(UtilityConstants.GENERIC_MODULE) && !accessoriesObject.isWrite()) {                            accessoriesObject.setWrite(true);                            GenericObject genericObject1 = new GenericObject("GM-1" + accessoriesObject.getMac(), accessoriesObject.getMac(), "1", "Light", "Point-1", "0", "0", "1", "0", "0", "GM");                            GenericObject genericObject2 = new GenericObject("GM-2" + accessoriesObject.getMac(), accessoriesObject.getMac(), "2", "Light", "Point-2", "0", "0", "1", "0", "0", "GM");                            GenericObject genericObject3 = new GenericObject("GM-3" + accessoriesObject.getMac(), accessoriesObject.getMac(), "3", "Light", "Point-3", "0", "0", "1", "0", "0", "GM");                            MqttOperation.writePOINT(genericObject1.getFilename(), new Gson().toJson(genericObject1));                            Thread.sleep(500);                            MqttOperation.writePOINT(genericObject2.getFilename(), new Gson().toJson(genericObject2));                            Thread.sleep(500);                            MqttOperation.writePOINT(genericObject3.getFilename(), new Gson().toJson(genericObject3));                            Thread.sleep(500);                        }                        if (accessoriesObject.getAccessory().equalsIgnoreCase(UtilityConstants.CONTROLLER_MODULE) && !accessoriesObject.isWrite()) {                            accessoriesObject.setWrite(true);                            if (Utility.KEYMAP == null) {                                Utility.KEYMAP = new HashMap<>();                            }                            for (String s : accessoriesObject.getPoints().split(",")) {                                if (s.trim().length() > 0) {                                    if (s.contains("F")) {                                        FanObject fanObject = new FanObject("FM-" + s + accessoriesObject.getMac(), s + accessoriesObject.getMac(), "0", "0", "FAN-" + s, "0", "0", "0", s, UtilityConstants.CFM);                                        MqttOperation.writeControllerPoints(fanObject.getFilename(), new Gson().toJson(fanObject));                                        Utility.KEYMAP.put(fanObject.getFilename(), Utility.getMinuteAndSecond());                                        Thread.sleep(500);                                    } else {                                        GenericObject genericObject1 = new GenericObject("GM-" + s + accessoriesObject.getMac(), accessoriesObject.getMac(), s, "Light", "Point-" + s, "0", "0", "1", "0", "0", UtilityConstants.CGM);                                        MqttOperation.writeControllerPoints(genericObject1.getFilename(), new Gson().toJson(genericObject1));                                        Utility.KEYMAP.put(genericObject1.getFilename(), Utility.getMinuteAndSecond());                                        Thread.sleep(500);                                    }                                }                            }                            MqttOperation.writeKeyMap();                        }                        if (accessoriesObject.getAccessory().equalsIgnoreCase(UtilityConstants.POWER_MODULE) && !accessoriesObject.isWrite()) {                            accessoriesObject.setWrite(true);                            PowerObject powerObject = new PowerObject("PM-" + accessoriesObject.getMac(), accessoriesObject.getMac(), "0", "0", "Power-1", "AC", "0", "0");                            MqttOperation.writePOINT(powerObject.getFilename(), new Gson().toJson(powerObject));                        }                        if (accessoriesObject.getAccessory().contains(UtilityConstants.RGB_MODULE) && !accessoriesObject.isWrite()) {                            accessoriesObject.setWrite(true);                            if (accessoriesObject.getAccessory().contains("-ProLED")) {                                RGBObject rgbObject = new RGBObject("RGB-" + accessoriesObject.getMac(), accessoriesObject.getMac(), "ProLED-1", "0", "0", "0", "0", "0", "0", "000000", "0", "0", "144", "1", "0");                                MqttOperation.writePOINT(rgbObject.getFilename(), new Gson().toJson(rgbObject));                            } else if (accessoriesObject.getAccessory().contains("-SimpleLED")) {                                RGBObject rgbObject = new RGBObject("RGB-" + accessoriesObject.getMac(), accessoriesObject.getMac(), "SimpleLED-1", "0", "0", "0", "0", "0", "0", "000000", "0", "0", "144", "0", "0");                                MqttOperation.writePOINT(rgbObject.getFilename(), new Gson().toJson(rgbObject));                            } else if (accessoriesObject.getAccessory().contains("-SingleColor")) {                                RGBObject rgbObject = new RGBObject("RGB-" + accessoriesObject.getMac(), accessoriesObject.getMac(), "SingleColor-1", "0", "0", "0", "0", "0", "0", "000000", "0", "0", "144", "2", "0");                                MqttOperation.writePOINT(rgbObject.getFilename(), new Gson().toJson(rgbObject));                            }                        }                        if (accessoriesObject.getAccessory().equalsIgnoreCase(UtilityConstants.FAN_MODULE) && !accessoriesObject.isWrite()) {                            accessoriesObject.setWrite(true);                            FanObject fanObject = new FanObject("FM-" + accessoriesObject.getMac(), accessoriesObject.getMac(), "0", "0", "FAN-1", "0", "0", "0", "F1", "FM");                            MqttOperation.writePOINT(fanObject.getFilename(), new Gson().toJson(fanObject));                        }                        if (accessoriesObject.getAccessory().equalsIgnoreCase(UtilityConstants.CURTAIN_MODULE) && !accessoriesObject.isWrite()) {                            accessoriesObject.setWrite(true);                            CurtainObject curtainObject = new CurtainObject("CM-" + accessoriesObject.getMac(), accessoriesObject.getMac(), "Curtain-1", "0", "0", "0");                            MqttOperation.writePOINT(curtainObject.getFilename(), new Gson().toJson(curtainObject));                        }                        if (accessoriesObject.getAccessory().equalsIgnoreCase(UtilityConstants.MOTION_MODULE) && !accessoriesObject.isWrite()) {                            accessoriesObject.setWrite(true);                            MotionObject motionObject = new MotionObject(UtilityConstants.MOTION + "-" + accessoriesObject.getMac(), accessoriesObject.getMac(), "0", "always", "00:00", "00:00", "10", "MOTION-1", "", "", "0");                            MqttOperation.writeMotionPOINT(motionObject.getFilename(), new Gson().toJson(motionObject));                        }                    }                }                MqttOperation.spiffsValueAction(UtilityConstants.WRITE, UtilityConstants.ACCESSORY, UtilityConstants.ACCESSORY, new Gson().toJson(accessoriesObjects));                if (userObject != null && userObject.getFile() != null && !Utility.USERMap.containsKey(userObject.getFile())) {                    MqttOperation.spiffsValueAction(UtilityConstants.WRITE, UtilityConstants.USER, userObject.getFile(), new Gson().toJson(userObject));                }                SharedPreference.setAccessorySyncFlag(context, false);                ConcurrentHashMap<String, RoomObject> roomObjectHashMap = SharedPreference.getRooms(context);                RoomObject roomObject = null;                for (Map.Entry<String, RoomObject> entry : roomObjectHashMap.entrySet()) {                    roomObject = entry.getValue();                    if (roomObject.getLast().equalsIgnoreCase(UtilityConstants.TRUE_TXT)) {                        roomObject.setLast(UtilityConstants.FALSE_TXT);                        MqttOperation.spiffsValueAction(UtilityConstants.WRITE, UtilityConstants.ROOM, roomObject.getFile(), new Gson().toJson(roomObject));                        roomObjectHashMap.put(roomObject.getFile(), roomObject);                    }                }                SharedPreference.setRooms(context, roomObjectHashMap);                for (AccessoriesObject accessoriesObject : accessoriesObjects.values()) {                    if (accessoriesObject != null && !accessoriesObject.getAccessory().equalsIgnoreCase(UtilityConstants.MINISERVER)) {                        if (accessoriesObject.getMac().contains("H")) {                            HfakeMACSet.add(accessoriesObject.getMac() + "#" + accessoriesObject.getIp());                        } else {                            if (accessoriesObject.getParentMAC().contains(ESPNOW)) {                                fakeMACSet.add(accessoriesObject.getMac());                            } else {                                String channel = getChannel(accessoriesObject.getReal_mac(), ESPNOW, accessoriesObjects);                                System.out.println("channel >>>" + channel);                                if (channel != null) {                                    fakeMACSet.add(channel + "#" + accessoriesObject.getMac());                                }                            }                        }                    }                }                if (fakeMACSet.size() > 0) {                    MqttOperation.preferenceValueAction(UtilityConstants.WRITE, UtilityConstants.FAKEMAC, fakeMACSet.toString().trim().replaceAll("\\[", "").replaceAll("\\]", "").replaceAll(" ", "").trim());                }                if (HfakeMACSet.size() > 0) {                    MqttOperation.preferenceValueAction(UtilityConstants.WRITE, UtilityConstants.HFAKEMAC, HfakeMACSet.toString().trim().replaceAll("\\[", "").replaceAll("\\]", "").replaceAll(" ", "").trim());                    System.out.println(">>>>>HfakeMACSet >>>>"+HfakeMACSet.toString().trim().replaceAll("\\[", "").replaceAll("\\]", "").replaceAll(" ", "").trim());                }                // MqttClient.publishMessage(MqttClient.HOMEUID, MqttOperation.getTransactionObject(UtilityConstants.INSTALLATION_STOP_STR, ""));            }            synchFirebaseToHome(Utility.connectedHome);        } catch (Exception e) {            e.printStackTrace();        }    }    public static String getChannel(String MAC, String ESPNOW, HashMap<String, AccessoriesObject> accessoriesObjects) {        try {            for (AccessoriesObject accessoriesObject : accessoriesObjects.values()) {                if (accessoriesObject != null && !accessoriesObject.getAccessory().equalsIgnoreCase(UtilityConstants.MINISERVER)) {                    if (accessoriesObject.getChildMAC().contains(MAC)) {                        if (accessoriesObject.getParentMAC().contains(ESPNOW)) {                            return accessoriesObject.getMac();                        } else {                            return getChannel(accessoriesObject.getReal_mac(), ESPNOW, accessoriesObjects);                        }                    }                }            }        } catch (Exception e) {            e.printStackTrace();        }        return null;    }    public static void synchFirebaseToHome(HomeObject homeObject) {        try {            homeObject.setAccessories(new HashMap<String, AccessoriesObject>(Utility.AccessoriesMap));            Utility.UpdateHome(homeObject);        } catch (Exception e) {            e.printStackTrace();        }    }    public static void SynchRoom() {        ConcurrentHashMap<String, RoomObject> roomObjectHashMap = SharedPreference.getRooms(MqttClient.globalContext);        try {            for (RoomObject roomObject : Utility.ROOMMap.values()) {                if (!roomObjectHashMap.containsKey(roomObject.getFile())) {                    roomObjectHashMap.put(roomObject.getFile(), roomObject);                }            }        } catch (Exception e) {            e.printStackTrace();        }    }    public static void SyncUserAccessControlData() {        try {            for (RoomObject roomObject : Utility.ROOMMap.values()) {                if (!Utility.isHost && Utility.CurrentUserObj.getMac().contains(roomObject.getFile())) {                    Utility.ROOMMap.remove(roomObject.getFile());                } else {                    Utility.ROOMMap.put(roomObject.getFile(), roomObject);                }            }            for (SceneObject sceneObject : Utility.SCENEMap.values()) {                if (!Utility.isHost && Utility.CurrentUserObj.getMac().contains(sceneObject.getFile())) {                    Utility.SCENEMap.remove(sceneObject.getFile());                } else {                    Utility.SCENEMap.put(sceneObject.getFile(), sceneObject);                }            }            for (GenericObject genericObject : Utility.genericObjectHashMap.values()) {                if (!Utility.isHost && Utility.CurrentUserObj.getMac().contains(genericObject.getMac() + ":" + genericObject.getPoint())) {                    Utility.genericObjectHashMap.remove(genericObject.getMac() + ":" + genericObject.getPoint());                } else {                    Utility.genericObjectHashMap.put(genericObject.getMac() + ":" + genericObject.getPoint(), genericObject);                }            }            for (PowerObject powerObject : Utility.powerObjectHashMap.values()) {                if (!Utility.isHost && Utility.CurrentUserObj.getMac().contains(powerObject.getMac())) {                    Utility.powerObjectHashMap.remove(powerObject.getMac());                } else {                    Utility.powerObjectHashMap.put(powerObject.getMac(), powerObject);                }            }            for (FanObject fanObject : Utility.fanObjectHashMap.values()) {                if (!Utility.isHost && Utility.CurrentUserObj.getMac().contains(fanObject.getMac())) {                    Utility.fanObjectHashMap.remove(fanObject.getMac());                } else {                    Utility.fanObjectHashMap.put(fanObject.getMac(), fanObject);                }            }            for (MotionObject motionObject : Utility.motionObjectHashMap.values()) {                if (!Utility.isHost && Utility.CurrentUserObj.getMac().contains(motionObject.getMac())) {                    Utility.motionObjectHashMap.remove(motionObject.getMac());                } else {                    Utility.motionObjectHashMap.put(motionObject.getMac(), motionObject);                }            }            for (RGBObject rgbObject : Utility.rgbObjectHashMap.values()) {                if (!Utility.isHost && Utility.CurrentUserObj.getMac().contains(rgbObject.getMac())) {                    Utility.rgbObjectHashMap.remove(rgbObject.getMac());                } else {                    Utility.rgbObjectHashMap.put(rgbObject.getMac(), rgbObject);                }            }            for (CurtainObject curtainObject : Utility.curtainObjectHashMap.values()) {                if (!Utility.isHost && Utility.CurrentUserObj.getMac().contains(curtainObject.getMac())) {                    Utility.curtainObjectHashMap.remove(curtainObject.getMac());                } else {                    Utility.curtainObjectHashMap.put(curtainObject.getMac(), curtainObject);                }            }        } catch (Exception e) {            e.printStackTrace();        }    }    public static LinkedList<Object> getAllRoomAccessories(RoomObject roomObject, String from) {        LinkedList<Object> room_accessories = new LinkedList<>();        try {            if (roomObject != null && roomObject.getMac().trim().length() > 0) {                for (FanObject fanObject : Utility.fanObjectHashMap.values()) {                    if (roomObject.getMac().contains(fanObject.getMac()) || (fanObject.getType().equalsIgnoreCase(UtilityConstants.CFM) && roomObject.getMac().contains(fanObject.getMac().replace("F1", "")))) {                        FanObject fanObject1 = (FanObject) fanObject.clone();                        fanObject1.setState(UtilityConstants.STATE_FALSE);                        room_accessories.add(fanObject1);                        if (from.equalsIgnoreCase(UtilityConstants.SCENE)) {                            AddSceneActivity.addSceneAccessories.add(fanObject1.getMac());                            AddSceneActivity.updateSceneData(fanObject1.getAutomationData(), UtilityConstants.ADD);                        } else if (from.equalsIgnoreCase(UtilityConstants.SCHEDULE)) {                            AddScheduleActivity.scheduleAccessoriesSet.add(fanObject1.getMac());                            AddScheduleActivity.updateScheduleData(fanObject1.getAutomationData(), UtilityConstants.ADD);                        } else if (from.equalsIgnoreCase(UtilityConstants.MOTION)) {//                            fanObject1.setState("1");////                            EditMotionActivity.motion_accessories.add(fanObject1.getMac());////                            EditMotionActivity.updateMotionData(fanObject1.getAutomationData(), UtilityConstants.ADD);                        }                    }                }                for (PowerObject powerObject : Utility.powerObjectHashMap.values()) {                    if (roomObject.getMac().contains(powerObject.getMac())) {                        PowerObject powerObject1 = (PowerObject) powerObject.clone();                        powerObject1.setState(UtilityConstants.STATE_FALSE);                        room_accessories.add(powerObject1);                        if (from.equalsIgnoreCase(UtilityConstants.SCENE)) {                            AddSceneActivity.addSceneAccessories.add(powerObject1.getMac());                            AddSceneActivity.updateSceneData(powerObject1.getAutomationData(), UtilityConstants.ADD);                        } else if (from.equalsIgnoreCase(UtilityConstants.SCHEDULE)) {                            AddScheduleActivity.scheduleAccessoriesSet.add(powerObject1.getMac());                            AddScheduleActivity.updateScheduleData(powerObject1.getAutomationData(), UtilityConstants.ADD);                        } else if (from.equalsIgnoreCase(UtilityConstants.MOTION)) {//                            powerObject1.setState("1");////                            EditMotionActivity.motion_accessories.add(powerObject1.getMac());////                            EditMotionActivity.updateMotionData(powerObject1.getAutomationData(), UtilityConstants.ADD);                        }                    }                }                for (CurtainObject curtainObject : Utility.curtainObjectHashMap.values()) {                    if (roomObject.getMac().contains(curtainObject.getMac())) {                        CurtainObject curtainObject1 = (CurtainObject) curtainObject.clone();                        curtainObject1.setState(UtilityConstants.STATE_FALSE);                        room_accessories.add(curtainObject1);                        if (from.equalsIgnoreCase(UtilityConstants.SCENE)) {                            AddSceneActivity.addSceneAccessories.add(curtainObject1.getMac());                            AddSceneActivity.updateSceneData(curtainObject1.getAutomationData(), UtilityConstants.ADD);                        } else if (from.equalsIgnoreCase(UtilityConstants.SCHEDULE)) {                            AddScheduleActivity.scheduleAccessoriesSet.add(curtainObject1.getMac());                            AddScheduleActivity.updateScheduleData(curtainObject1.getAutomationData(), UtilityConstants.ADD);                        } else if (from.equalsIgnoreCase(UtilityConstants.MOTION)) {//                            curtainObject1.setState(UtilityConstants.STATE_TRUE);////                            EditMotionActivity.motion_accessories.add(curtainObject1.getMac());////                            EditMotionActivity.updateMotionData(curtainObject1.getAutomationData(), UtilityConstants.ADD);                        }                    }                }                for (RGBObject rgbObject : Utility.rgbObjectHashMap.values()) {                    if (roomObject.getMac().contains(rgbObject.getMac())) {                        RGBObject rgbObject1 = (RGBObject) rgbObject.clone();                        rgbObject1.setState(UtilityConstants.STATE_FALSE);                        rgbObject1.setRgb("99999");                        room_accessories.add(rgbObject1);                        if (from.equalsIgnoreCase(UtilityConstants.SCENE)) {                            AddSceneActivity.addSceneAccessories.add(rgbObject1.getMac());                            AddSceneActivity.updateSceneData(rgbObject1.getAutomationData(), UtilityConstants.ADD);                        } else if (from.equalsIgnoreCase(UtilityConstants.SCHEDULE)) {                            AddScheduleActivity.scheduleAccessoriesSet.add(rgbObject1.getMac());                            AddScheduleActivity.updateScheduleData(rgbObject1.getAutomationData(), UtilityConstants.ADD);                        } else if (from.equalsIgnoreCase(UtilityConstants.MOTION)) {//                            rgbObject1.setState(UtilityConstants.STATE_TRUE);////                            EditMotionActivity.motion_accessories.add(rgbObject1.getMac());////                            EditMotionActivity.updateMotionData(rgbObject1.getAutomationData(), UtilityConstants.ADD);                        }                    }                }                for (GenericObject genericObject : Utility.genericObjectHashMap.values()) {                    if (genericObject.getUsed().equalsIgnoreCase(UtilityConstants.STATE_TRUE) && roomObject.getMac().contains(genericObject.getMac())) {                        GenericObject genericObject1 = (GenericObject) genericObject.clone();                        genericObject1.setState(UtilityConstants.STATE_FALSE);                        room_accessories.add(genericObject1);                        if (from.equalsIgnoreCase(UtilityConstants.SCENE)) {                            AddSceneActivity.addSceneAccessories.add(genericObject1.getMac() + ":" + genericObject1.getPoint());                            AddSceneActivity.updateSceneData(genericObject1.getAutomationData(), UtilityConstants.ADD);                        } else if (from.equalsIgnoreCase(UtilityConstants.SCHEDULE)) {                            AddScheduleActivity.scheduleAccessoriesSet.add(genericObject1.getMac() + ":" + genericObject1.getPoint());                            AddScheduleActivity.updateScheduleData(genericObject1.getAutomationData(), UtilityConstants.ADD);                        } else if (from.equalsIgnoreCase(UtilityConstants.MOTION)) {                            genericObject1.setState(UtilityConstants.STATE_TRUE);                            EditMotionActivity.motion_accessories.add(genericObject1.getMac() + ":" + genericObject1.getPoint());                            EditMotionActivity.updateMotionData(genericObject1.getAutomationData(), UtilityConstants.ADD);                        }                    }                }            }        } catch (Exception e) {            e.printStackTrace();        }        return room_accessories;    }    public static void actionOnObserverField(String key) {        try {            if (key != null) {                boolean flag = true;                for (ObservableField<String> observableField : runtimeObservable) {                    if (observableField.get().equalsIgnoreCase(key)) {                        observableField.notifyChange();                        flag = false;                    }                }                if (flag) {                    runtimeObservable.add(new ObservableField<>(key));                }            }        } catch (Exception e) {            e.printStackTrace();        }    }    public static String getEncoded64ImageStringFromBitmap(Bitmap bitmap) {        ByteArrayOutputStream stream = new ByteArrayOutputStream();        String imgString = null;        try {            bitmap.compress(Bitmap.CompressFormat.JPEG, 70, stream);            byte[] byteFormat = stream.toByteArray();            imgString = Base64.encodeToString(byteFormat, Base64.NO_WRAP);        } catch (Exception e) {            e.printStackTrace();        }        return imgString;    }    public static Bitmap ConvertBase64TOBitmap(String imgString) {        byte[] decodedString = Base64.decode(imgString.getBytes(), Base64.DEFAULT);        Bitmap decodedByte = BitmapFactory.decodeByteArray(decodedString, 0, decodedString.length);        return decodedByte;    }    public static String getMinuteAndSecond() {        return new Date().getMinutes() + "" + new Date().getSeconds();    }    public static void synchKeyMap(Context globalContext) {        HashMap<String, String> storedKeyMap = null;        try {            storedKeyMap = SharedPreference.getKeyMap(MqttClient.globalContext);            System.out.println("storedKeyMap >>>" + storedKeyMap);            if (storedKeyMap == null || (storedKeyMap != null && storedKeyMap.size() == 0)) {                System.out.println(">>>>>>>>> calling network_data");                MqttClient.publishMessage(HOMEUID, MqttOperation.getTransactionObject(UtilityConstants.NETWORK_DATA_TRANSACTION, SharedPreference.getPhone_number(MqttClient.globalContext.getApplicationContext())));            } else if (storedKeyMap != null && storedKeyMap.size() > 0) {                for (Map.Entry<String, String> entry : storedKeyMap.entrySet()) {                    if (Utility.KEYMAP != null && !Utility.KEYMAP.containsKey(entry.getKey())) {                        String type = entry.getKey();                        if (type.contains(UtilityConstants.SCENE)) {                            if (Utility.SCENEMap != null && Utility.SCENEMap.containsKey(entry.getKey())) {                                Utility.SCENEMap.remove(entry.getKey());                                SharedPreference.setScenes(globalContext, Utility.SCENEMap);                            }                        } else if (type.contains(UtilityConstants.SCHEDULE)) {                            if (Utility.SCHEDULEMap != null && Utility.SCHEDULEMap.containsKey(entry.getKey())) {                                Utility.SCHEDULEMap.remove(entry.getKey());                                SharedPreference.setSchedules(globalContext, Utility.SCHEDULEMap);                            }                        } else if (type.contains(UtilityConstants.ROOM)) {                            if (Utility.ROOMMap != null && Utility.ROOMMap.containsKey(entry.getKey())) {                                Utility.ROOMMap.remove(entry.getKey());                                SharedPreference.setRooms(globalContext, Utility.ROOMMap);                            }                        } else if (type.contains(UtilityConstants.USER)) {                            if (Utility.USERMap != null && Utility.USERMap.containsKey(entry.getKey())) {                                Utility.USERMap.remove(entry.getKey());                                SharedPreference.setUsers(globalContext, Utility.USERMap);                            }                        } else if (type.contains("GM-")) {                            if (Utility.genericObjectHashMap != null && Utility.genericObjectHashMap.containsKey(entry.getKey())) {                                for (GenericObject genericObject : Utility.genericObjectHashMap.values()) {                                    if (genericObject.getFilename().equalsIgnoreCase(entry.getKey())) {                                        Utility.genericObjectHashMap.remove(genericObject.getMac() + ":" + genericObject.getPoint());                                        break;                                    }                                }                                SharedPreference.setGMs(globalContext, Utility.genericObjectHashMap);                            }                        } else if (type.contains("FM-")) {                            if (Utility.fanObjectHashMap != null && Utility.fanObjectHashMap.containsKey(entry.getKey())) {                                for (FanObject fanObject : Utility.fanObjectHashMap.values()) {                                    if (fanObject.getFilename().equalsIgnoreCase(entry.getKey())) {                                        Utility.fanObjectHashMap.remove(fanObject.getMac());                                        break;                                    }                                }                                SharedPreference.setFMs(globalContext, Utility.fanObjectHashMap);                            }                        } else if (type.contains("RGB-")) {                            if (Utility.rgbObjectHashMap != null && Utility.rgbObjectHashMap.containsKey(entry.getKey())) {                                for (RGBObject rgbObject : Utility.rgbObjectHashMap.values()) {                                    if (rgbObject.getFilename().equalsIgnoreCase(entry.getKey())) {                                        Utility.rgbObjectHashMap.remove(rgbObject.getMac());                                        break;                                    }                                }                                SharedPreference.setRGBs(globalContext, Utility.rgbObjectHashMap);                            }                        } else if (type.contains("CM-")) {                            if (Utility.curtainObjectHashMap != null && Utility.curtainObjectHashMap.containsKey(entry.getKey())) {                                for (CurtainObject curtainObject : Utility.curtainObjectHashMap.values()) {                                    if (curtainObject.getFilename().equalsIgnoreCase(entry.getKey())) {                                        Utility.curtainObjectHashMap.remove(curtainObject.getMac());                                        break;                                    }                                }                                SharedPreference.setCMs(globalContext, Utility.curtainObjectHashMap);                            }                        } else if (type.contains("PM-")) {                            if (Utility.powerObjectHashMap != null && Utility.powerObjectHashMap.containsKey(entry.getKey())) {                                for (PowerObject powerObject : Utility.powerObjectHashMap.values()) {                                    if (powerObject.getFilename().equalsIgnoreCase(entry.getKey())) {                                        Utility.powerObjectHashMap.remove(powerObject.getMac());                                        break;                                    }                                }                                SharedPreference.setPMs(globalContext, Utility.powerObjectHashMap);                            }                        } else if (type.contains("MOTION-")) {                            if (Utility.motionObjectHashMap != null && Utility.motionObjectHashMap.containsKey(entry.getKey())) {                                for (MotionObject motionObject : Utility.motionObjectHashMap.values()) {                                    if (motionObject.getFilename().equalsIgnoreCase(entry.getKey())) {                                        Utility.motionObjectHashMap.remove(motionObject.getMac());                                        break;                                    }                                }                                SharedPreference.setMMs(globalContext, Utility.motionObjectHashMap);                            }                        }                    }                }            }            for (Map.Entry<String, String> entry : Utility.KEYMAP.entrySet()) {                Boolean flag = true;                if (storedKeyMap != null && storedKeyMap.containsKey(entry.getKey()) && storedKeyMap.get(entry.getKey()).equalsIgnoreCase(entry.getValue())) {                    flag = false;                }                String key = getType(entry.getKey());                if (key != null && key.equalsIgnoreCase(UtilityConstants.SCENE) && Utility.SCENEMap != null && !Utility.SCENEMap.containsKey(entry.getKey())) {                    flag = true;                }                if (key != null && key.equalsIgnoreCase(UtilityConstants.SCHEDULE) && Utility.SCHEDULEMap != null && !Utility.SCHEDULEMap.containsKey(entry.getKey())) {                    flag = true;                }                if (key != null && key.equalsIgnoreCase(UtilityConstants.ROOM) && Utility.ROOMMap != null && !Utility.ROOMMap.containsKey(entry.getKey())) {                    flag = true;                }                if (key != null && key.equalsIgnoreCase(UtilityConstants.USER) && Utility.USERMap != null && !Utility.USERMap.containsKey(entry.getKey())) {                    flag = true;                }                if (key != null && key.equalsIgnoreCase(UtilityConstants.ACCESSORY) && (Utility.AccessoriesMap == null || (Utility.AccessoriesMap != null && Utility.AccessoriesMap.size() == 0))) {                    flag = true;                }                if (entry.getKey().contains("GM-")) {                    flag = true;                    for (GenericObject genericObject : Utility.genericObjectHashMap.values()) {                        if (genericObject.getFilename().equalsIgnoreCase(entry.getKey())) {                            flag = false;                        }                    }                }                if (entry.getKey().contains("CM-")) {                    if (!Utility.curtainObjectHashMap.containsKey(entry.getKey().replace("CM-", ""))) {                        flag = true;                    }                }                if (entry.getKey().contains("FM-")) {                    if (!Utility.fanObjectHashMap.containsKey(entry.getKey().replace("FM-", ""))) {                        flag = true;                    }                }                if (entry.getKey().contains("MOTION-")) {                    if (!Utility.motionObjectHashMap.containsKey(entry.getKey().replace("MOTION-", ""))) {                        flag = true;                    }                }                if (entry.getKey().contains("RGB-")) {                    if (!Utility.rgbObjectHashMap.containsKey(entry.getKey().replace("RGB-", ""))) {                        flag = true;                    }                }                if (entry.getKey().contains("PM-")) {                    if (!Utility.powerObjectHashMap.containsKey(entry.getKey().replace("PM-", ""))) {                        flag = true;                    }                }                if (flag) {                    System.out.println("reading file >>>" + entry.getKey());                    String type = getType(entry.getKey());                    if (entry.getKey().contains("-")) {                        if (entry.getKey().contains(UtilityConstants.MOTION)) {                            MqttOperation.spiffsValueAction(UtilityConstants.READ, UtilityConstants.MOTION_POINT, entry.getKey(), "");                        } else {                            MqttOperation.spiffsValueAction(UtilityConstants.READ, UtilityConstants.POINT, entry.getKey(), "");                        }                    } else if (type != null && entry.getKey().contains(type)) {                        MqttOperation.spiffsValueAction(UtilityConstants.READ, type, entry.getKey(), "");                    }                    Thread.sleep(200);                }            }        } catch (Exception e) {            e.printStackTrace();        }    }    public static String getType(String filename) {        String type = null;        if (filename.contains(UtilityConstants.SCENE)) {            type = UtilityConstants.SCENE;        } else if (filename.contains(UtilityConstants.SCHEDULE)) {            type = UtilityConstants.SCHEDULE;        } else if (filename.contains(UtilityConstants.ROOM)) {            type = UtilityConstants.ROOM;        } else if (filename.contains(UtilityConstants.USER)) {            type = UtilityConstants.USER;        } else if (filename.contains(UtilityConstants.ACCESSORY)) {            type = UtilityConstants.ACCESSORY;        }        return type;    }    public static void setOfflineToState() {        try {            for (GenericObject genericObject : Utility.genericObjectHashMap.values()) {                genericObject.setState(UtilityConstants.STATE_OFFLINE);                Utility.genericObjectHashMap.put(genericObject.getMac() + ":" + genericObject.getPoint(), genericObject);                Utility.actionOnObserverField(genericObject.getMac() + ":" + genericObject.getPoint());            }            for (CurtainObject curtainObject : Utility.curtainObjectHashMap.values()) {                curtainObject.setState(UtilityConstants.STATE_OFFLINE);                Utility.curtainObjectHashMap.put(curtainObject.getMac(), curtainObject);                Utility.actionOnObserverField(curtainObject.getMac());            }            for (FanObject fanObject : Utility.fanObjectHashMap.values()) {                fanObject.setState(UtilityConstants.STATE_OFFLINE);                Utility.fanObjectHashMap.put(fanObject.getMac(), fanObject);                Utility.actionOnObserverField(fanObject.getMac());            }            for (PowerObject powerObject : Utility.powerObjectHashMap.values()) {                powerObject.setState(UtilityConstants.STATE_OFFLINE);                Utility.powerObjectHashMap.put(powerObject.getMac(), powerObject);                Utility.actionOnObserverField(powerObject.getMac());            }            for (RGBObject rgbObject : Utility.rgbObjectHashMap.values()) {                rgbObject.setState(UtilityConstants.STATE_OFFLINE);                Utility.rgbObjectHashMap.put(rgbObject.getMac(), rgbObject);                Utility.actionOnObserverField(rgbObject.getMac());            }            for (MotionObject motionObject : Utility.motionObjectHashMap.values()) {                motionObject.setActive(UtilityConstants.STATE_OFFLINE);                Utility.motionObjectHashMap.put(motionObject.getMac(), motionObject);                Utility.actionOnObserverField(motionObject.getMac());            }        } catch (Exception e) {            e.printStackTrace();        }    }    public static String getModuleTypeByFakeMAC(String fakeMAC) {        String type = "";        try {            HashMap<String, AccessoriesObject> accessoriesObjectHashMap = SharedPreference.getAccessories(MqttClient.globalContext);            for (AccessoriesObject accessoriesObject : accessoriesObjectHashMap.values()) {                if (accessoriesObject.getAccessory().contains(UtilityConstants.GENERIC_MODULE) && accessoriesObject.getMac().equalsIgnoreCase(fakeMAC)) {                    type = UtilityConstants.GENERIC_MODULE;                } else if (accessoriesObject.getAccessory().contains(UtilityConstants.FAN_MODULE) && (accessoriesObject.getMac().equalsIgnoreCase(fakeMAC) || fakeMAC.contains(accessoriesObject.getMac()))) {                    type = UtilityConstants.FAN_MODULE;                } else if (accessoriesObject.getAccessory().contains(UtilityConstants.RGB_MODULE) && accessoriesObject.getMac().equalsIgnoreCase(fakeMAC)) {                    type = UtilityConstants.RGB_MODULE;                } else if (accessoriesObject.getAccessory().contains(UtilityConstants.CURTAIN_MODULE) && accessoriesObject.getMac().equalsIgnoreCase(fakeMAC)) {                    type = UtilityConstants.CURTAIN_MODULE;                } else if (accessoriesObject.getAccessory().contains(UtilityConstants.POWER_MODULE) && accessoriesObject.getMac().equalsIgnoreCase(fakeMAC)) {                    type = UtilityConstants.POWER_MODULE;                } else if (accessoriesObject.getAccessory().contains(UtilityConstants.CONTROLLER_MODULE) && accessoriesObject.getMac().equalsIgnoreCase(fakeMAC)) {                    type = UtilityConstants.GENERIC_MODULE;                } else if (accessoriesObject.getAccessory().contains(UtilityConstants.CONTROLLER_MODULE) && fakeMAC.contains("F")) {                    type = UtilityConstants.FAN_MODULE;                }            }        } catch (Exception e) {            e.printStackTrace();        }        return type;    }    public static void CheckForMQTTVersion() {        try {            if (Utility.MQTT != null && Utility.MQTT.length() > 0 && Utility.OnlineVersions.getMQTT() != null                    && !Utility.MQTT.equalsIgnoreCase(Utility.OnlineVersions.getMQTT())) {                MqttOperation.preferenceValueAction(UtilityConstants.WRITE, UtilityConstants.MQTT, Utility.OnlineVersions.getMQTT());                Utility.connectedHome.setMqtt(Utility.OnlineVersions.getMQTT());                Utility.UpdateHome(Utility.connectedHome);            }        } catch (Exception e) {            e.printStackTrace();        }    }}